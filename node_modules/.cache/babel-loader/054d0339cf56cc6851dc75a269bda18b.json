{"ast":null,"code":"import _slicedToArray from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ivan/Desktop/www/widget/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ivan/Desktop/www/widget/src/contexts/ContextMain/ContextMain.js\";\nimport React, { PureComponent } from 'react'; //services-api\n\nimport { getGeoAutodetection, getGeolocation, getListOfCountry, getCityByZip, getListUSPorts, getListDestinationsPort } from '../../services/api/location-requests';\nimport { getQuoteCalculationUSA } from '../../services/api/quote-calculation'; //context\n\nvar _React$createContext = React.createContext(''),\n    Provider = _React$createContext.Provider,\n    MainConsumer = _React$createContext.Consumer;\n\nvar countryState;\nvar countriesList;\nvar quotaParameters;\n\nvar MainProvider =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(MainProvider, _PureComponent);\n\n  function MainProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MainProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MainProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: true,\n      loadingQuote: false,\n      showModalAbout: false,\n      showModalInfo: false,\n      changeDestinantion: false,\n      addressClient: {},\n      addressVehicle: {},\n      countryState: {},\n      quotaParameters: {},\n      newPlaceFullData: null,\n      errorClient: false,\n      nearistUSAPort: \"\",\n      portInCurrentCountry: \"\",\n      zip: \"97218\",\n      country: \"US\",\n      lot: \"31666779\",\n      vin: \"WBA3A5C55DF359066\",\n      origin_zip: \"30052\",\n      year: \"2018\",\n      make: \"FORD\",\n      model: \"FOCUS\",\n      latitudeVehicle: \"45.523064\",\n      longitudeVehicle: \"-122.676483\"\n    };\n\n    _this.handleOnChangeInputDestination =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(place) {\n        var _place$geometry$locat, lat, lng, locationLat, locationLng, GeolocationData, newPlaceFullData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _place$geometry$locat = place.geometry.location, lat = _place$geometry$locat.lat, lng = _place$geometry$locat.lng;\n                locationLat = lat();\n                locationLng = lng();\n                _context.next = 5;\n                return getGeolocation(locationLat, locationLng);\n\n              case 5:\n                GeolocationData = _context.sent;\n                // get new place data: {zip, city, state, state_code}\n                newPlaceFullData = GeolocationData.data;\n                return _context.abrupt(\"return\", _this.setState({\n                  newPlaceFullData: newPlaceFullData\n                }));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleGetQuote =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state, addressClient, newPlaceFullData, origin_zip, vin, changeDestinantion, destination_zip, responseQuota;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              _this.setState({\n                isLoading: true\n              });\n\n              _this$state = _this.state, addressClient = _this$state.addressClient, newPlaceFullData = _this$state.newPlaceFullData, origin_zip = _this$state.origin_zip, vin = _this$state.vin, changeDestinantion = _this$state.changeDestinantion;\n\n              if (!(newPlaceFullData && newPlaceFullData.zip)) {\n                _context2.next = 12;\n                break;\n              }\n\n              destination_zip = newPlaceFullData.zip;\n              _context2.next = 7;\n              return getQuoteCalculationUSA({\n                origin_zip: origin_zip,\n                destination_zip: destination_zip,\n                vin: vin\n              });\n\n            case 7:\n              responseQuota = _context2.sent;\n              // get new quota\n              quotaParameters = responseQuota.data;\n\n              _this.setState({\n                changeDestinantion: !_this.state.changeDestinantion,\n                addressClient: _objectSpread({}, addressClient, newPlaceFullData),\n                quotaParameters: quotaParameters,\n                isLoading: false\n              });\n\n              _context2.next = 13;\n              break;\n\n            case 12:\n              return _context2.abrupt(\"return\", _this.setState({\n                isLoading: false,\n                changeDestinantion: !changeDestinantion,\n                newPlaceFullData: null\n              }));\n\n            case 13:\n              _context2.next = 19;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              _this.setState({\n                isLoading: false,\n                errorClient: true\n              });\n\n              console.error(_context2.t0, \"error\");\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 15]]);\n    }));\n\n    _this.handleQuoteCancel = function () {\n      var changeDestinantion = _this.state.changeDestinantion;\n      return _this.setState({\n        changeDestinantion: !changeDestinantion,\n        newPlaceFullData: null\n      });\n    };\n\n    _this.toggleModalAbout = function () {\n      return _this.setState(function (state) {\n        return {\n          showModalAbout: !state.showModalAbout\n        };\n      });\n    };\n\n    _this.toggleModalInfo = function () {\n      return _this.setState(function (state) {\n        return {\n          showModalInfo: !state.showModalInfo\n        };\n      });\n    };\n\n    _this.toggleModalErr = function () {\n      return _this.setState(function (state) {\n        return {\n          errorClient: !state.errorClient\n        };\n      });\n    };\n\n    _this.countQuoteForUSA =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(data) {\n        var destination_zip, _this$state2, origin_zip, vin, responseСountries, _this$handlerFilterBy, id, type, responseQuota, address, _address, addressClient, addressVehicle;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _this$state2 = _this.state, origin_zip = _this$state2.origin_zip, vin = _this$state2.vin;\n                countryState = data;\n                _context3.next = 5;\n                return getListOfCountry();\n\n              case 5:\n                responseСountries = _context3.sent;\n                // get list of countries\n                countriesList = responseСountries.data;\n                _this$handlerFilterBy = _this.handlerFilterByCountry(), id = _this$handlerFilterBy.id, type = _this$handlerFilterBy.type; // get id and type country\n\n                countryState.id = id;\n                countryState.type = type;\n                destination_zip = countryState.zip;\n                _context3.next = 13;\n                return getQuoteCalculationUSA({\n                  origin_zip: origin_zip,\n                  destination_zip: destination_zip,\n                  vin: vin\n                });\n\n              case 13:\n                responseQuota = _context3.sent;\n                quotaParameters = responseQuota.data; // get quota\n\n                _context3.next = 17;\n                return Promise.all([getCityByZip(countryState.zip), getCityByZip(origin_zip)]);\n\n              case 17:\n                address = _context3.sent;\n                _address = _slicedToArray(address, 2), addressClient = _address[0], addressVehicle = _address[1]; // get addresses\n\n                _this.setState({\n                  countryState: countryState,\n                  addressClient: addressClient.data,\n                  addressVehicle: addressVehicle.data,\n                  quotaParameters: quotaParameters,\n                  isLoading: false\n                });\n\n                _context3.next = 25;\n                break;\n\n              case 22:\n                _context3.prev = 22;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n\n              case 25:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 22]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.countQuoteForInter =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(responseData) {\n        var destination_zip, listUSPorts, nearestPort, _this$state3, origin_zip, vin, responseСountries, _this$handlerFilterBy2, id, type, responseListUSPorts, responseListDestinationsPort;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _this$state3 = _this.state, origin_zip = _this$state3.origin_zip, vin = _this$state3.vin;\n                countryState = responseData.data;\n                _context4.next = 5;\n                return getListOfCountry();\n\n              case 5:\n                responseСountries = _context4.sent;\n                // get list of countries\n                countriesList = responseСountries.data;\n                _this$handlerFilterBy2 = _this.handlerFilterByCountry(), id = _this$handlerFilterBy2.id, type = _this$handlerFilterBy2.type; // get id and type country\n\n                countryState.id = id;\n                countryState.type = type;\n                _context4.next = 12;\n                return getListUSPorts(countryState.id, _this.state.latitudeVehicle, _this.state.longitudeVehicle);\n\n              case 12:\n                responseListUSPorts = _context4.sent;\n                // get list USA ports\n                listUSPorts = responseListUSPorts.data;\n                nearestPort = listUSPorts[0]; // get nearist port in USA\n\n                _context4.next = 17;\n                return getListDestinationsPort(countryState.id);\n\n              case 17:\n                responseListDestinationsPort = _context4.sent;\n                console.log(responseListDestinationsPort, \"responseListDestinationsPort\"); // destination_zip = countryState.zip;\n                // const responseQuota = await getQuoteCalculationUSA({\n                //   origin_zip,\n                //   destination_zip,\n                //   vin,\n                // });\n                // quotaParameters = responseQuota.data;            // get quota\n                // const address = await Promise.all([\n                //   getCityByZip(countryState.zip),\n                //   getCityByZip(origin_zip),\n                // ]);\n                // const [addressClient, addressVehicle] = address; // get addresses\n                // this.setState({\n                //   countryState,\n                //   addressClient: addressClient.data,\n                //   addressVehicle: addressVehicle.data,\n                //   quotaParameters,\n                //   isLoading: false,\n                // });\n\n                _context4.next = 24;\n                break;\n\n              case 21:\n                _context4.prev = 21;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.error(_context4.t0);\n\n              case 24:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 21]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.handlerFilterByCountry = function () {\n      var countryInfo = countriesList.filter(function (country) {\n        return country.iso_2 === countryState.country;\n      })[0];\n      var id = countryInfo.id,\n          type = countryInfo.type;\n      console.log(countryState, \"countryState\");\n      return {\n        id: id,\n        type: type\n      };\n    };\n\n    _this.handleChangeDestinantion = function () {\n      return _this.setState(function (state) {\n        return {\n          changeDestinantion: !state.changeDestinantion\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MainProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      getGeoAutodetection().then(function (response) {\n        var country = response.data.country;\n\n        if (country === \"US\") {\n          console.log(country, \"US\");\n\n          _this2.countQuoteForUSA(response); // countryState = response.data;\n          // return getListOfCountry();\n\n        } else {\n          console.log(country, \"Another\");\n\n          _this2.countQuoteForInter(response);\n        } // this.countQuoteForUSA(response);\n        // countryState = response.data;\n        // return getListOfCountry();\n\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      var _this$state4 = this.state,\n          isLoading = _this$state4.isLoading,\n          loadingQuote = _this$state4.loadingQuote,\n          showModalAbout = _this$state4.showModalAbout,\n          showModalInfo = _this$state4.showModalInfo,\n          changeDestinantion = _this$state4.changeDestinantion,\n          make = _this$state4.make,\n          model = _this$state4.model,\n          year = _this$state4.year,\n          addressClient = _this$state4.addressClient,\n          addressVehicle = _this$state4.addressVehicle,\n          quotaParameters = _this$state4.quotaParameters,\n          errorClient = _this$state4.errorClient;\n      return React.createElement(Provider, {\n        value: {\n          isLoading: isLoading,\n          loadingQuote: loadingQuote,\n          showModalAbout: showModalAbout,\n          showModalInfo: showModalInfo,\n          changeDestinantion: changeDestinantion,\n          make: make,\n          model: model,\n          year: year,\n          quotaParameters: quotaParameters,\n          errorClient: errorClient,\n          addressClient: addressClient,\n          addressVehicle: addressVehicle,\n          toggleModalAbout: this.toggleModalAbout,\n          toggleModalInfo: this.toggleModalInfo,\n          handleChangeDestinantion: this.handleChangeDestinantion,\n          handleOnChangeInputDestination: this.handleOnChangeInputDestination,\n          handleGetQuote: this.handleGetQuote,\n          handleQuoteCancel: this.handleQuoteCancel,\n          toggleModalErr: this.toggleModalErr\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return MainProvider;\n}(PureComponent);\n\nvar TestProvider = Provider;\nexport { MainProvider, MainConsumer, TestProvider };","map":{"version":3,"sources":["/home/ivan/Desktop/www/widget/src/contexts/ContextMain/ContextMain.js"],"names":["React","PureComponent","getGeoAutodetection","getGeolocation","getListOfCountry","getCityByZip","getListUSPorts","getListDestinationsPort","getQuoteCalculationUSA","createContext","Provider","MainConsumer","Consumer","countryState","countriesList","quotaParameters","MainProvider","state","isLoading","loadingQuote","showModalAbout","showModalInfo","changeDestinantion","addressClient","addressVehicle","newPlaceFullData","errorClient","nearistUSAPort","portInCurrentCountry","zip","country","lot","vin","origin_zip","year","make","model","latitudeVehicle","longitudeVehicle","handleOnChangeInputDestination","place","geometry","location","lat","lng","locationLat","locationLng","GeolocationData","data","setState","handleGetQuote","destination_zip","responseQuota","console","error","handleQuoteCancel","toggleModalAbout","toggleModalInfo","toggleModalErr","countQuoteForUSA","responseСountries","handlerFilterByCountry","id","type","Promise","all","address","countQuoteForInter","responseData","responseListUSPorts","listUSPorts","nearestPort","responseListDestinationsPort","log","countryInfo","filter","iso_2","handleChangeDestinantion","then","response","catch","err","children","props","TestProvider"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\n//services-api\nimport {\n  getGeoAutodetection,\n  getGeolocation,\n  getListOfCountry,\n  getCityByZip,\n  getListUSPorts,\n  getListDestinationsPort\n} from '../../services/api/location-requests';\nimport { getQuoteCalculationUSA } from '../../services/api/quote-calculation';\n//context\nconst { Provider, Consumer: MainConsumer } = React.createContext('');\nlet countryState;\nlet countriesList;\nlet quotaParameters;\n\nclass MainProvider extends PureComponent {\n  state = {\n    isLoading: true,\n    loadingQuote: false,\n    showModalAbout: false,\n    showModalInfo: false,\n    changeDestinantion: false,\n    addressClient: {},\n    addressVehicle: {},\n    countryState: {},\n    quotaParameters: {},\n    newPlaceFullData: null,\n    errorClient: false,\n    nearistUSAPort: \"\",\n    portInCurrentCountry: \"\",\n    zip: \"97218\",\n    country: \"US\",\n    lot: \"31666779\",\n    vin: \"WBA3A5C55DF359066\",\n    origin_zip: \"30052\",\n    year: \"2018\",\n    make: \"FORD\",\n    model: \"FOCUS\",\n    latitudeVehicle: \"45.523064\",\n    longitudeVehicle: \"-122.676483\",\n  };\n\n  handleOnChangeInputDestination = async place => {\n    const { lat, lng } = place.geometry.location;\n    const locationLat = lat();\n    const locationLng = lng();\n\n    const GeolocationData = await getGeolocation(locationLat, locationLng); // get new place data: {zip, city, state, state_code}\n    const newPlaceFullData = GeolocationData.data;\n    return this.setState({\n      newPlaceFullData,\n    });\n  };\n\n  handleGetQuote = async () => {\n    try {\n      this.setState({\n        isLoading: true,\n      });\n      const {\n        addressClient,\n        newPlaceFullData,\n        origin_zip,\n        vin,\n        changeDestinantion,\n      } = this.state;\n\n      if (newPlaceFullData && newPlaceFullData.zip) {\n        const destination_zip = newPlaceFullData.zip;\n        const responseQuota = await getQuoteCalculationUSA({\n          origin_zip,\n          destination_zip,\n          vin,\n        }); // get new quota\n        quotaParameters = responseQuota.data;\n\n        this.setState({\n          changeDestinantion: !this.state.changeDestinantion,\n          addressClient: { ...addressClient, ...newPlaceFullData },\n          quotaParameters,\n          isLoading: false,\n        });\n      } else {\n        return this.setState({\n          isLoading: false,\n          changeDestinantion: !changeDestinantion,\n          newPlaceFullData: null,\n        });\n      }\n    } catch (error) {\n      this.setState({\n        isLoading: false,\n        errorClient: true,\n      });\n      console.error(error, \"error\");\n    }\n  };\n\n  handleQuoteCancel = () => {\n    const { changeDestinantion } = this.state;\n    return this.setState({\n      changeDestinantion: !changeDestinantion,\n      newPlaceFullData: null,\n    });\n  };\n\n  toggleModalAbout = () => {\n    return this.setState(state => ({ showModalAbout: !state.showModalAbout }));\n  };\n  toggleModalInfo = () => {\n    return this.setState(state => ({ showModalInfo: !state.showModalInfo }));\n  };\n  toggleModalErr = () => {\n    return this.setState(state => ({ errorClient: !state.errorClient }));\n  };\n\n  countQuoteForUSA = async data => {\n    try {\n      let destination_zip;\n      const { origin_zip, vin } = this.state;\n      countryState = data;\n\n      const responseСountries = await getListOfCountry(); // get list of countries\n      countriesList = responseСountries.data;\n      const { id, type } = this.handlerFilterByCountry(); // get id and type country\n      countryState.id = id;\n      countryState.type = type;\n      destination_zip = countryState.zip;\n\n      const responseQuota = await getQuoteCalculationUSA({\n        origin_zip,\n        destination_zip,\n        vin,\n      });\n      quotaParameters = responseQuota.data; // get quota\n\n      const address = await Promise.all([\n        getCityByZip(countryState.zip),\n        getCityByZip(origin_zip),\n      ]);\n      const [addressClient, addressVehicle] = address; // get addresses\n\n      this.setState({\n        countryState,\n        addressClient: addressClient.data,\n        addressVehicle: addressVehicle.data,\n        quotaParameters,\n        isLoading: false,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  countQuoteForInter = async responseData => {\n    try {\n      let destination_zip, listUSPorts, nearestPort;\n      const { origin_zip, vin } = this.state;\n      countryState = responseData.data;\n      const responseСountries = await getListOfCountry(); // get list of countries\n      countriesList = responseСountries.data;\n\n      const { id, type } = this.handlerFilterByCountry(); // get id and type country\n      countryState.id = id;\n      countryState.type = type;\n\n      const responseListUSPorts = await getListUSPorts(\n        countryState.id,\n        this.state.latitudeVehicle,\n        this.state.longitudeVehicle\n      );                                                      // get list USA ports\n      listUSPorts = responseListUSPorts.data;\n      nearestPort = listUSPorts[0];                           // get nearist port in USA\n      \n\n      const responseListDestinationsPort = await getListDestinationsPort(\n        countryState.id\n      );\n      console.log(\n        responseListDestinationsPort,\n        \"responseListDestinationsPort\"\n      );\n        \n      // destination_zip = countryState.zip;\n\n      // const responseQuota = await getQuoteCalculationUSA({\n      //   origin_zip,\n      //   destination_zip,\n      //   vin,\n      // });\n      // quotaParameters = responseQuota.data;            // get quota\n\n      // const address = await Promise.all([\n      //   getCityByZip(countryState.zip),\n      //   getCityByZip(origin_zip),\n      // ]);\n      // const [addressClient, addressVehicle] = address; // get addresses\n\n      // this.setState({\n      //   countryState,\n      //   addressClient: addressClient.data,\n      //   addressVehicle: addressVehicle.data,\n      //   quotaParameters,\n      //   isLoading: false,\n      // });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  handlerFilterByCountry = () => {\n    const countryInfo = countriesList.filter(\n      country => country.iso_2 === countryState.country\n    )[0];\n    const { id, type } = countryInfo;\n    console.log(countryState, \"countryState\");\n    return { id, type };\n  };\n\n  handleChangeDestinantion = () =>\n    this.setState(state => ({\n      changeDestinantion: !state.changeDestinantion,\n    }));\n\n  componentDidMount() {\n    getGeoAutodetection()\n      .then(response => {\n        const { country } = response.data;\n        if (country === \"US\") {\n          console.log(country, \"US\");\n          this.countQuoteForUSA(response);\n          // countryState = response.data;\n          // return getListOfCountry();\n        } else {\n          console.log(country, \"Another\");\n          this.countQuoteForInter(response);\n        }\n        // this.countQuoteForUSA(response);\n        // countryState = response.data;\n        // return getListOfCountry();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    const { children } = this.props;\n    const {\n      isLoading,\n      loadingQuote,\n      showModalAbout,\n      showModalInfo,\n      changeDestinantion,\n      make,\n      model,\n      year,\n      addressClient,\n      addressVehicle,\n      quotaParameters,\n      errorClient,\n    } = this.state;\n\n    return (\n      <Provider\n        value={{\n          isLoading,\n          loadingQuote,\n          showModalAbout,\n          showModalInfo,\n          changeDestinantion,\n          make,\n          model,\n          year,\n          quotaParameters,\n          errorClient,\n          addressClient,\n          addressVehicle,\n          toggleModalAbout: this.toggleModalAbout,\n          toggleModalInfo: this.toggleModalInfo,\n          handleChangeDestinantion: this.handleChangeDestinantion,\n          handleOnChangeInputDestination: this.handleOnChangeInputDestination,\n          handleGetQuote: this.handleGetQuote,\n          handleQuoteCancel: this.handleQuoteCancel,\n          toggleModalErr: this.toggleModalErr,\n        }}\n      >\n        {children}\n      </Provider>\n    );\n  }\n}\n\nconst TestProvider = Provider;\n\nexport { MainProvider, MainConsumer, TestProvider };\n"]},"metadata":{},"sourceType":"module"}